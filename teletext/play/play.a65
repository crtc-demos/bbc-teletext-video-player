#define oswrch $ffee
#define osbyte $fff4
#define osfind $ffce
#define osgbpb $ffd1
#define oscli $fff7

; 10KHz * 100 = 1000000
;#define HZ0 64
;#define HZ1 66
;#define HZ2 15
;#define HZ3 0

; 10KHz = 10000
;#define HZ0 16
;#define HZ1 39
;#define HZ2 0
;#define HZ3 0

; 8KHz / 10 = 800
;#define HZ0 32
;#define HZ1 3
;#define HZ2 0
;#define HZ3 0

; 8KHz = 8000
#define HZ0 64
#define HZ1 31
#define HZ2 0
#define HZ3 0

; 1000000 / Hz
;   - 12.5KHz -> 80
;   - 10KHz   -> 100
;   - 8KHz    -> 125
#define RHZ 125

; These values work OK for Aphex Twin, Come To Daddy video

; Video frames per second (/ 10)
;#define FPS 3

#define ABUF1 $1400
#define ABUF1END $2c00

#define ABUF2 $2c00
#define ABUF2END $4400

#define VBUF1 $4400
#define VBUF2 $6000

#define VIDBLKSIZE 7168
#define AUDBLKSIZE 6144

; These values (don't really) work OK for Pitchshifter, Dead Battery

; Video frames per second
#define FPS 15

;#define ABUF1 $1c00
;#define ABUF1END $2c00

;#define ABUF2 $2c00
;#define ABUF2END $3c00

;#define VBUF1 $3c00
;#define VBUF2 $5c00

;#define VIDBLKSIZE 8192
;#define AUDBLKSIZE 4096

; Video variables
#define videoptr      $00
#define vidtmp1       $02
#define vidtmp2       $04
#define vidtmp3       $05
#define vidtmp4       $06
#define renderbusy    $08
#define currentvidbuf $09
#define vidblockreq   $0a
#define vidblk1rdy    $0b
#define vidblk2rdy    $0c
#define framestodraw  $0d
#define vidloadstall  $0e
#define videof        $0f

; Audio variables
#define audioptr      $10
#define currentaudbuf $12
#define audblockreq   $13
#define samplectr     $14
#define audblk1rdy    $18
#define audblk2rdy    $19
#define audloadstall  $1a

	*= $e00
	
	.(
	; open files, prebuffer
	jsr openfile
	jsr loadblock
	jsr queueblock
	jsr openfile_v
	jsr loadblock_v
	jsr queueblock_v

	jsr setmode

	; start audio
	jsr initptr
	jsr initfreq
	jsr inittimer1irq

	; start video
	jsr initptr_v
	jsr setup_event

	; poll a/v to get new blocks
	jsr pollmedia

	jsr close_events

	rts
	.)

vdubytes
	.byt 22
	.byt 7
	.byt 23
	.byt 0
	.byt 10
	.byt 32
	.byt 0
	.byt 0
	.byt 0
	.byt 0
	.byt 0
	.byt 0

setmode
	.(
	ldx #0
loop
	lda vdubytes,x
	jsr oswrch
	inx
	cpx #12
	bne loop
	rts
	.)

handle
	.byt 0

openfile
	.(
	lda #$40
	ldx #<filename
	ldy #>filename
	jsr osfind
	sta handle
	rts
	.)

filename
	.asc "track8k", 0

gbpb_block
gbpb_fh
	.byt 0
gbpb_io
	.byt 0
	.byt 0
	.byt 0
	.byt 0
gbpb_tfer
	.byt 0
	.byt 0
	.byt 0
	.byt 0
gbpb_seq
	.byt 0
	.byt 0
	.byt 0
	.byt 0

loadblock
	.(
	lda handle
	sta gbpb_fh
	lda #<ABUF1
	sta gbpb_io
	lda #>ABUF1
	sta gbpb_io+1
	lda #<AUDBLKSIZE
	sta gbpb_tfer
	lda #>AUDBLKSIZE
	sta gbpb_tfer+1
	lda #<0
	sta gbpb_seq
	lda #>0
	sta gbpb_seq+1
	lda #0/65536
	sta gbpb_seq+2
	ldx #<gbpb_block
	ldy #>gbpb_block
	lda #3
	jsr osgbpb
	
	lda #1
	sta audblk1rdy
	
	stz audloadstall
	
	rts
	.)

nextblock
	.(
	lda handle
	sta gbpb_fh
	lda #0
	sta gbpb_io
	lda audblockreq
	pha
	cmp #2
	beq secondbuf
	lda #>ABUF1
	jmp chosenbuf
secondbuf
	lda #>ABUF2
chosenbuf
	sta gbpb_io+1

	; clear request.
	stz audblockreq

	lda #<AUDBLKSIZE
	sta gbpb_tfer
	lda #>AUDBLKSIZE
	sta gbpb_tfer+1
	ldx #<gbpb_block
	ldy #>gbpb_block
	lda #3
	jsr osgbpb
	bcs end_of_file
	
	; mark the loaded block as ready.
	plx
	dex
	lda #1
	sta audblk1rdy, x
	
	rts
end_of_file
	plx
	inc videof
	rts
	.)

; Queue the block after the first.
queueblock
	.(
	lda #2
	sta audblockreq
	jsr nextblock
	rts
	.)

handle_v
	.byt 0

openfile_v
	.(
	lda #$40
	ldx #<filename_v
	ldy #>filename_v
	jsr osfind
	sta handle_v
	rts
	.)

filename_v
	.asc "outsqz", 0

gbpb_block_v
gbpb_fh_v
	.byt 0
gbpb_io_v
	.byt 0
	.byt 0
	.byt 0
	.byt 0
gbpb_tfer_v
	.byt 0
	.byt 0
	.byt 0
	.byt 0
gbpb_seq_v
	.byt 0
	.byt 0
	.byt 0
	.byt 0

loadblock_v
	.(
	lda handle_v
	sta gbpb_fh_v
	lda #<VBUF1
	sta gbpb_io_v
	lda #>VBUF1
	sta gbpb_io_v+1
	lda #<VIDBLKSIZE
	sta gbpb_tfer_v
	lda #>VIDBLKSIZE
	sta gbpb_tfer_v+1
	lda #<0
	sta gbpb_seq_v
	lda #>0
	sta gbpb_seq_v+1
	lda #0/65536
	sta gbpb_seq_v+2
	ldx #<gbpb_block_v
	ldy #>gbpb_block_v
	lda #3
	jsr osgbpb
	
	; buffer 1 is ready.
	lda #1
	sta vidblk1rdy
	rts
	.)

	; vidblockreq is the buffer to reload (1 or 2).
	; vidblk1rdy is set to 1 when buffer 1 is ready.
	; vidblk2rdy is set to 1 when buffer 2 is ready.

nextblock_v
	.(
	lda handle_v
	sta gbpb_fh_v
	stz gbpb_io_v
	
	lda vidblockreq
	pha
	cmp #2
	beq secondbuf
	lda #>VBUF1
	jmp chosenbuf
secondbuf
	lda #>VBUF2
chosenbuf
	sta gbpb_io_v+1
	
	; clear video request
	stz vidblockreq
	
	lda #<VIDBLKSIZE
	sta gbpb_tfer_v
	lda #>VIDBLKSIZE
	sta gbpb_tfer_v+1
	ldx #<gbpb_block_v
	ldy #>gbpb_block_v
	lda #3
	jsr osgbpb
	bcs end_of_file
	
	plx
	dex
	lda #1
	sta vidblk1rdy,x
	
	rts

end_of_file
	plx
	;inc videof
	rts
	.)

queueblock_v
	.(
	lda #2
	sta vidblockreq
	jsr nextblock_v
	rts
	.)

initptr_v
	.(
	lda #<VBUF1
	ldx #>VBUF1
	sta videoptr
	stx videoptr+1
	
	; currentvidbuf is current video buffer (zero).
	stz currentvidbuf
	
	rts
	.)

; poll vidblockreq for video-block requests and audblockreq for audio-block requests.

pollmedia
	.(
repeat
	lda videof
	beq not_end
	
	.(
busy_wait
	;jmp busy_wait
	.)
	
	rts
not_end
	lda vidblockreq
	beq skipvideo
	jsr nextblock_v
skipvideo
	lda audblockreq
	beq repeat

	jsr nextblock
	jmp repeat
	
	rts
	.)

setup_event
	.(
	lda #<render_event
	ldx #>render_event
	;sta $220
	;stx $221
	
	; enable vsync event
	;lda #14
	;ldx #4
	;jsr osbyte
	
	; renderer busy
	stz renderbusy
	
	; frames outstanding
	stz framestodraw
	
	; stalled on video block load
	stz vidloadstall
	
	; end of video file
	stz videof
	
	rts
	.)

render_event
	.(
	php
	pha
	phx
	phy
	
	;lda samplectr+3
	;cmp #HZ3
	;bcc no_new_frame
	;bne new_frame
	;lda samplectr+2
	;cmp #HZ2
	;bcc no_new_frame
	;bne new_frame
	lda samplectr+1
	cmp #HZ1
	bcc no_new_frame
	bne new_frame
	lda samplectr
	cmp #HZ0
	bcc no_new_frame
new_frame
	lda samplectr
	sec
	sbc #HZ0
	sta samplectr
	lda samplectr+1
	sbc #HZ1
	sta samplectr+1
	;lda samplectr+2
	;sbc #HZ2
	;sta samplectr+2
	;lda samplectr+3
	;sbc #HZ3
	;sta samplectr+3

	inc framestodraw

no_new_frame

	lda framestodraw
	beq no_frames
	
	.(
	lda renderbusy
	bne busy

	; busy
	lda #1
	sta renderbusy

	; decrement number of outstanding frames to render.
	dec framestodraw
	
	; enable interrupts to do the actual rendering.
	cli
	jsr render
	sei
		
	; not busy
	stz renderbusy
	
busy
	.)
no_frames

	ply
	plx
	pla
	plp
	rts
	.)

render
	.(
	ldx currentvidbuf
	lda vidblk1rdy,x
	bne ready
	; if buffer isn't ready, drop out now (and re-queue frame).
	inc framestodraw
	rts
ready
	; if a video block load stalled previously, retry it now.
	lda vidloadstall
	.(
	beq no_newblock
	jmp newblock
no_newblock
	.)
	
	lda (videoptr)
	cmp #127
	.(
	bne notnew
	jmp newblock
notnew	.)
	cmp #255
	.(
	bne notraw
	jmp rawframe
notraw	.)
	bit #$80
	bne diffframe
		
rleframe
	sta vidtmp4
	
	;lda #'R'
	;jsr oswrch
	
	; skip over frame type byte.
	inc videoptr
	.(
	bne nohi
	inc videoptr+1
nohi	.)
	
	.(
do_spans
	lda vidtmp4
	beq spans_done
	dec vidtmp4
	
	; a run-length encoded frame.
	lda (videoptr)
	sta vidtmp1
	ldy #1
	lda (videoptr), y
	sta vidtmp1+1
	iny
	lda (videoptr), y
	tax
	; now (vidtmp1) is the span start, X is the (uncompressed) length.
	lda videoptr
	clc
	adc #3
	sta videoptr
	.(
	bcc nohi
	inc videoptr+1
nohi	.)
	
	stz vidtmp3
rlespans
	ldy vidtmp3
	; get repeat count
	lda (videoptr), y
	; stow repeat count in vidtmp2
	sta vidtmp2
	iny
	; get byte to write
	lda (videoptr), y
	iny
	; store Y index in vidtmp3
	sty vidtmp3

	; now A has byte to write, vidtmp2 has repeat count (where 0 means 256).
	ldy vidtmp2
	.(
fill
	dey
	sta (vidtmp1), y
	bne fill
	.)
	
	; add run-length to screen ptr, treating vidtmp2==0 as vidtmp2==256.
	.(
	lda vidtmp2
	beq skip256
	clc
	adc vidtmp1
	sta vidtmp1
	bcc nohi
skip256
	inc vidtmp1+1
nohi	.)
	
	; subtract the length of this span from total (X).
	.(
	lda vidtmp2
	beq xtozero
	txa
	sec
	sbc vidtmp2
xtozero
	tax
	.)
	
	bne rlespans
	
	; add RLE data length to frame pointer.
	.(
	lda videoptr
	clc
	adc vidtmp3
	sta videoptr
	bcc nohi
	inc videoptr+1
nohi	.)

	jmp do_spans

spans_done
	.)

	rts

diffframe
	; number of spans in vidtmp2.
	and #$7f
	sta vidtmp2
	
	;lda #'D'
	;jsr oswrch
	
	; skip over frame type byte.
	inc videoptr
	.(
	bne nohi
	inc videoptr+1
nohi	.)
	
	.(
do_span
	lda vidtmp2
	beq all_done

	dec vidtmp2
	
	lda (videoptr)
	sta vidtmp1
	ldy #1
	lda (videoptr), y
	sta vidtmp1+1
	iny
	lda (videoptr), y
	; keep (uncompressed span) length in vidtmp3.
	sta vidtmp3
	tay
	; now (vidtmp1) is span start, Y is the length.
	; advance (videoptr) to data.
	lda videoptr
	clc
	adc #3
	sta videoptr
	.(
	bcc nohi
	inc videoptr+1
nohi	.)
	
fill
	dey
	lda (videoptr), y
	sta (vidtmp1), y
	cpy #0
	bne fill
	
	; skip (videoptr) over data, treating vidtmp3==0 as vidtmp3=256.
	.(
	lda vidtmp3
	beq skip256
	clc
	adc videoptr
	sta videoptr
	bcc nohi
skip256
	inc videoptr+1
nohi	.)
	
	jmp do_span
	
all_done
	rts
	.)

rawframe
	.(
	
	;lda #'W'
	;jsr oswrch
	
	; skip over frame-type byte
	inc videoptr
	.(
	bne nohi
	inc videoptr+1
nohi	.)

	lda #<$7C00
	ldx #>$7C00
	sta vidtmp1
	stx vidtmp1+1
	
	; copy src pointer
	lda videoptr
	ldx videoptr+1
	sta vidtmp2
	stx vidtmp3

	ldx #3
	ldy #0
copy
	lda (vidtmp2), y
	sta (vidtmp1), y
	dey
	bne copy

	inc vidtmp3
	inc vidtmp1+1
	dex
	bne copy
	
	ldy #0
copy2
	lda (vidtmp2), y
	sta (vidtmp1), y
	iny
	cpy #232
	bne copy2
	
	; add frame size to frame ptr
	lda videoptr
	clc
	adc #<1000
	sta videoptr
	lda videoptr+1
	adc #>1000
	sta videoptr+1

	rts
	.)

newblock
	.(
	lda vidblockreq
	beq req_clear
	; mark block-load stalled.
	lda #1
	sta vidloadstall
	; re-queue frame.
	inc framestodraw
	rts
req_clear
	stz vidloadstall
	.)

	lda currentvidbuf
	bne buftwo
		
	; switch to second buffer
	stz videoptr
	lda #>VBUF2
	sta videoptr+1
	; request reload of first buffer (should be atomic!)
	lda #1
	sei
	sta vidblockreq
	; second buffer active.
	sta currentvidbuf
	; buffer 1 not ready.
	stz vidblk1rdy
	cli
	
	jmp switched
buftwo
	; switch to first buffer
	stz videoptr
	lda #>VBUF1
	sta videoptr+1
	; request reload of second buffer (likewise.)
	lda #2
	sei
	sta vidblockreq
	; first buffer active.
	stz currentvidbuf
	; buffer 2 not ready.
	stz vidblk2rdy
	cli
switched

	jmp render

	; end of render.
	.)

; Initialise audioptr to point to sound data (first 4K buffer, at ABUF1).
; currentaudbuf tells which block is active (0/1).
initptr
	.(
	lda #<ABUF1
	ldx #>ABUF1
	sta audioptr
	stx audioptr+1
	stz currentaudbuf
	stz audblockreq
	; synch counters.
	stz samplectr
	stz samplectr+1
	stz samplectr+2
	stz samplectr+3
	rts
	.)

#define SYS_T1C_L $fe44
#define SYS_T1C_H $fe45
#define SYS_T1L_L $fe46
#define SYS_T1L_H $fe47
#define SYS_T2C_L $fe48
#define SYS_T2C_H $fe49
#define SYS_SR $fe4a
#define SYS_ACR $fe4b
#define SYS_PCR $fe4c
#define SYS_IFR $fe4d
#define SYS_IER $fe4e

#define USR_T1C_L $fe64
#define USR_T1C_H $fe65
#define USR_T1L_L $fe66
#define USR_T1L_H $fe67
#define USR_T2C_L $fe68
#define USR_T2C_H $fe69
#define USR_SR $fe6a
#define USR_ACR $fe6b
#define USR_PCR $fe6c
#define USR_IFR $fe6d
#define USR_IER $fe6e

oldirq1v
	.word 0

inittimer1irq
	.(
	lda $204
	ldx $205
	sta oldirq1v
	stx oldirq1v+1
	
	sei

	; Continuous interrupts for timer 1.
	lda USR_ACR
	and #$3f
	ora #$40
	sta USR_ACR

	; Point at irq handler.
	lda #<irqhandler
	ldx #>irqhandler
	sta $204
	stx $205

	; Enable Usr timer 1 interrupt.
	lda #$c0
	sta USR_IER

	lda #<RHZ
	ldx #>RHZ
	sta USR_T1C_L
	stx USR_T1C_H

	; Disable System VIA interrupts.
	lda #$7f
	sta SYS_IER
	; Enable system timer 1 and CA1 (vsync).
	lda #$c1
	sta SYS_IER

	cli
	
	rts
	.)

bye
	.asc "KEY10 0CLS:P.'",34,"VIA by Neurotypical",34,"''",34
	.asc "Sundown 2009",34,"''",34,"Thanks for watching!",34,"'|MRUN|M",13

close_events
	.(
	sei
	ldx #<bye
	ldy #>bye
	jsr oscli
	; just reset!
	; (hard!)
	;lda #200
	;ldx #3
	;jsr osbyte
	jmp ($fffc)
	rts
	.)

soundstrobe
	.(
	sta $fe41
	; strobe is supposed to be at least 8uS. This should do.
	stz $fe40
	nop
	nop
	nop
	nop
	lda #$08
	sta $fe40
	rts
	.)

; initialise sound frequencies on 3 channels. Don't use the same frequency for
; each! Can't control phase.
initfreq
	.(
	sei
	
	lda #$ff
	sta $fe43
	
	; channel 3
	lda #$81
	jsr soundstrobe
	lda #$00
	jsr soundstrobe
	
	; channel 2
	lda #$a2
	jsr soundstrobe
	lda #$00
	jsr soundstrobe
	
	; channel 1
	lda #$c3
	jsr soundstrobe
	lda #$00
	jsr soundstrobe
	
	cli
	rts
	.)

; samplectr (4 bytes) is sample counter.

exitirq
	.(
	lda #$82
	bit SYS_IFR
	; top bit clear - not irq from sys via
	bpl done
	and #2
	beq done
	
	; clear CA1 interrupt
	lda #2
	sta SYS_IFR

	jsr render_event	

done
	pla
	sta $fc
	jmp (oldirq1v)
	.)

irqhandler
	.(
	lda $fc
	pha

	lda #$c0
	bit USR_IFR
	; top bit clear - not interrupt from 6522 (user VIA).
	bpl exitirq
	; bit 6 clear - not our interrupt, process next in chain.
	bvc exitirq

	; Clear timer1 interrupt flag.
	lda USR_T1C_L
	
	; want Y too.
	phy
		
	; play sample!
	
	; see if we stalled loading an audio buffer.
	lda audloadstall
	bne retry_audiobuf
	
	; if current buffer isn't ready, drop out.
	.(
	ldy currentaudbuf
	lda audblk1rdy, y
	bne bufready
	jmp bufnotready
bufready
	.)

	lda (audioptr)
	
	bpl allchannels
	
	; inlined below.
	;jsr soundstrobe
	
write_and_incr
	sta $fe41
	stz $fe40
	; synch counter
	clc
	lda samplectr
	adc #<FPS
	sta samplectr
	lda samplectr+1
	adc #>FPS
	sta samplectr+1
;	.(
;	bcc nohi
;	inc samplectr+2
;nohi	.)
	;lda samplectr+2
	;adc #0
	;sta samplectr+2
	;.(
	;bcc nohi
	;inc samplectr+3
;nohi	.)
	
	lda #$08
	sta $fe40
	
	jmp played_samp

allchannels
	; todo -- glitch sequence ordering.
	and #15
	tay
	ora #$90
	jsr soundstrobe
	tya
	ora #$b0
	jsr soundstrobe
	tya
	ora #$d0
	;jsr soundstrobe
	jmp write_and_incr

played_samp
	; just for shits & giggles
	;lda #0
	;sta (audioptr)

	; move to next sample / check for end-of-buffer.
	inc audioptr
	bne noaudiohibyte
	inc audioptr+1

retry_audiobuf
	lda currentaudbuf
	bne buftwo

	lda audioptr+1
	cmp #>ABUF1END
	bcc noaudiohibyte
	
	.(
	lda audblockreq
	beq blockreqclear
	lda #1
	sta audloadstall
	jmp bufnotready
blockreqclear
	stz audloadstall
	.)
	
	; switch to second buffer.
	lda #1
	sta currentaudbuf
	; request reload of buffer 1.
	sta audblockreq
	stz audblk1rdy
	stz audioptr
	lda #>ABUF2
	sta audioptr+1
	jmp noaudiohibyte

buftwo
	lda audioptr+1
	cmp #>ABUF2END
	bcc noaudiohibyte

	.(
	lda audblockreq
	beq blockreqclear
	lda #1
	sta audloadstall
	jmp bufnotready
blockreqclear
	stz audloadstall
	.)

	; switch to first buffer.
	stz currentaudbuf
	; request reload of buffer 2.
	lda #2
	sta audblockreq
	stz audblk2rdy
	stz audioptr
	lda #>ABUF1
	sta audioptr+1
noaudiohibyte

bufnotready
	; handled our interrupt, don't chain to next.
	ply
	pla
	sta $fc
	rti

	.)
